#!/usr/bin/perl
#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
use warnings;
use strict;

use Getopt::Std;
use Proc::ProcessTable;

our($opt_o, $opt_t, $opt_e);
getopts('t:e:o:');

my $alarm_exit_code = 1;

my $outfile="timedrun.out";

if ($opt_o ne "") {
    $outfile = $opt_o;
}

my $deadman_seconds;
if ($opt_t ne "") {
    $SIG{ALRM} = 'alarmHandler';
    $deadman_seconds = $opt_t;
}

if ($opt_e ne "") {
    $alarm_exit_code = $opt_e;
}

our $pid;

FORK: {
    if ($pid = fork) {
        # parent
        if (defined ($deadman_seconds)){
            alarm($deadman_seconds);
        }
        wait;
        exit($? >> 8);
    } elsif (defined $pid) { # $pid is zero here if defind
        # child
        open(STDOUT, '>', $outfile) or die "failed to redirect stdout";
        open(STDERR, ">&STDOUT") or die "failed to redirect stderr";
        exec @ARGV;
    } elsif ($! =~ /No more process/) {
        # EAGAIN, supposedly recoverable fork error
        sleep 5;
        redo FORK;
    } else {
        # weird fork error
        die "Can't fork: $!\n";
    }
}

sub alarmHandler {
    print "CAUGHT ALARM\n";
    system("kill -3 $pid 2>/dev/null");
    sleep 2;
    system("kill  $pid 2>/dev/null");
    sleep 2;
    euthanase($pid);
    exit($alarm_exit_code);
}

sub euthanase {
    my $processTable = new Proc::ProcessTable;

    my $DEBUG;
    # Comment in the next line to print out all
    # fields available in the process table
    # $DEBUG = 'defined';
    if (defined ($DEBUG)) {
         print "All process table fields\n";
         foreach my $f ($processTable->fields) {
             print $f, "\n";
         }
    }

    foreach my $p (@{$processTable->table}) {
        my $processPid = $p->pid;
        my $processPpid = $p->ppid;
        # NOTE: process table fields are OS-specific
        # Only tested on Linux right now.
        if ($processPid == $pid || $processPpid == $pid) {
            $p->kill(9);
        }
    }
}

