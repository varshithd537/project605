##################################
# LCMP_CMOV
##################################
r: LCMP_CMOV(r, OTHER_OPERAND(rlv, any))
(13 + 30)
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Compare.create(IA32_CMP,  CondMove.getClearVal1(P(p)), CondMove.getClearVal2(P(p))))); \\
CMOV_MOV(P(p), CondMove.getClearResult(P(p)), CondMove.getClearCond(P(p)), \\
         CondMove.getClearTrueValue(P(p)), CondMove.getClearFalseValue(P(p)));

r: LCMP_CMOV(r, OTHER_OPERAND(INT_CONSTANT, any))
VRL(p) == 0 && CMP_TO_TEST(CondMove.getCond(P(p))) ? (11 + 30):INFINITE
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Test.create(IA32_TEST, CondMove.getClearVal1(P(p)), CondMove.getClearVal1(P(p)).copy()))); \\
CMOV_MOV(P(p), CondMove.getClearResult(P(p)), CondMove.getClearCond(P(p)), \\
         CondMove.getClearTrueValue(P(p)), CondMove.getClearFalseValue(P(p)));

r: LCMP_CMOV(load64, OTHER_OPERAND(rlv, any))
(15 + 30)
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Compare.create(IA32_CMP, consumeMO(), CondMove.getClearVal2(P(p))))); \\
CMOV_MOV(P(p), CondMove.getClearResult(P(p)), CondMove.getClearCond(P(p)), \\
         CondMove.getClearTrueValue(P(p)), CondMove.getClearFalseValue(P(p)));

r: LCMP_CMOV(rlv, OTHER_OPERAND(load64, any))
(15 + 30)
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Compare.create(IA32_CMP, consumeMO(), CondMove.getVal1(P(p))))); \\
CMOV_MOV(P(p), CondMove.getClearResult(P(p)), CondMove.getClearCond(P(p)).flipOperands(), \\
         CondMove.getClearTrueValue(P(p)), CondMove.getClearFalseValue(P(p)));

